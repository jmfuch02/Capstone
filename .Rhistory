library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
mean(x)
traceback()
x <- 1
traceback()
library(datasets)
data(iris)
?iris
summary(iris)
head(iris)
mean(iris[$Species == virginica,])
mean(iris[iris$Species == virginica,])
str(iris)
iris$Species
iris(which(iris$Species == "virginica"), )
iris[which(iris$Species == "virginica"), ]
mean(iris[which(iris$Species == "virginica"), ])
vdat <- iris[which(iris$Species == "virginica"), ]
View(vdat)
mean(vdat$Species)
mean(vdat$Sepal.Length)
rowMeans(iris[, 1:4])
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
apply(iris,1,mean)
library(datasets)
data(mtcars)
?mtcars
str(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hpower <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hpower[,3]
hpower
str(hpower)
hpower(3) - hpower(2)
hpower[3]-hpower[2]
hpower[3]-hpower[1]
debug(ls)
ls
ls()
q
?browse
?clear
str(x)
str(z)
str(str)
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/best.R')
?nrows()
?nrows
??nrows
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("MD", "heart attack", 4)
setwd("C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data")
rankhospital("MD", "heart attack", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart attack", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_subset <- outcome_data[which(outcome_data$State == state), ]
state <= "MD"
state <- "MD"
outcome_subset <- outcome_data[which(outcome_data$State == state), ]
outcome_subset[,11] <- as.numeric(na.omit(outcome_subset[,11]))
View(outcome_subset)
outcome_subset <- outcome_data[which(outcome_data$State == state), ]
View(outcome_subset)
str(outcome_subset)
outcome_subset[,11] <- na.omit(as.numeric(outcome_subset[,11]))
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
outcome_subset <- outcome_data[which(outcome_data$State == state), ]
outcome_subset[,11] <- as.numeric(outcome_subset[,11])
outcome_subset <- outcome_subset[complete.cases(outcome_subset[,11])]
View(outcome_subset)
outcome_subset <- outcome_subset[complete.cases(outcome_subset[,11]),]
View(outcome_subset)
source('C:/Users/jfuchs/rstats_wdir/rprog-data-ProgAssignment3-data/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
getwd()
setwd("C:/Users/Jason/Documents/coursera")
getwd()
q()
setwd("~/Coursera")
?qunif
qunif(1)
qunif(0.75)
qunif(1, 0, 2)
qunif(0.5, 0, 2)
qunif(0.75, 0, 2)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(p)
sum(x ^ 2 * p) - sum(x * p)^2
sum(x * p)
?pnorm
pnorm(70, mean = 80, sd = 10)
pnorm(1)
pnorm(-1)
1.645*75
+1100
123.375
123.375+1100
qnorm(.95, mean = 1100, sd = 75)
75/sqrt(100)
1100+1.645*7.5
qnorm(.95, mean = 1000, sd = 7.5)
qnorm(.95, mean = 1100, sd = 7.5)
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
means
rnorm(1)
rnorm(1)
rnorm(2)
plot(means)
n <- 5000
means <- cumsum(rnorm(n))/(1:n)
plot(means)
means <- cumsum(rnorm(n))/(1:n)
plot(means)
means <- cumsum(rnorm(n))/(1:n)
plot(means)
install.packages("knitr")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("markdown")
m1 <- 1/100
m2 <- 10/1787
m1 - m2
se1 <- (m1*(1-m1)/100)
pnorm(-1.87)
se1 <- (m1*(1-m1)/100)
se <- (m1*(1-m1)/100)
z = (m1-m2)/se
pnorm(z)
z = (m1-m2)/se
z = (m2-m1)/se
se <- sqrt((m1*(1-m1)/100))
z = (m2-m1)/se
se <- sqrt((m1*(1-m1))/100)
se <- sqrt((m1*(1-m1))/100)
z = (m2-m1)/se
pnorm(z)
se <- sqrt((m1*(1-m1))/1787)
z = (m2-m1)/se
pnorm(z)
qt(0.975, 8)
t <- qt(0.975, 8)
se <- sqrt((1.5^2/9)+(1.8^2/9))
se <- sqrt(((1.5^2)+(1.8^2))/9)
1.5^2
1.8^2
1.5^2 + 1.8^2
(1.5^2 + 1.8^2)/9
sqrt((1.5^2 + 1.8^2)/9)
se <- sqrt((1.5^2 + 1.8^2)/9)
t * se
se <- sqrt((1.5^2 + 1.8^2)/9)
se <- (3.3)/sqrt(9)
se <- sqrt((1.5^2 + 1.8^2)/9)
4 + t*se
4 - t*se
se <- sqrt((1.5^2 + 1.8^2)/9)
?qt
0.025 * 2
1.5^2/9
((1.5^2/9)+(1.8^2/9))^2
top <- ((1.5^2/9)+(1.8^2/9))^2
top <- ((1.5^2/9)+(1.8^2/9))^2
bottom <- (((1.5^2/9)^2)/8) + ((1.8^2/9)^2)/8
top/bottom
qt(0.975, 15.5)
1/.4
0.04/10
se <- 0.04/10
.01/se
t <- qt(0.95,99)
t
x <- .01/se
x <- .01/se; x
t <- qt(0.95,99); t
t/x
qnorm(0.95)
t <- qt(0.95,99); t
z <- qnorm(0.95)
z/x
alpha <- 0.05
z <- qnorm(1 - alpha)
z <- qnorm(1 - alpha); z
mu0 <- 0
mua <- 0.01
sigma <- 0.04
n <- 100
alpha <- 0.05
mu0 <- 0
mua <- 0.01
sigma <- 0.04
n <- 100
z <- qnorm(1 - alpha); z
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z*sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
alpha <- 0.05
mu0 <- 0
mua <- 0.01
sigma <- 0.04
z <- qnorm(1 - alpha); z
n <- 1000
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 100
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 500
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 200
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 110
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 120
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
n <- 140
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
R.version.string
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1-(3/36)
deck
52
4/52
0
12/52
2/52
2/51
0.64
0.64
mypdf
integrate(mypdf, 0, 1.6)
1/4
sqrt(2)
0.997*0.001
(1-.985)*(1-0.001)
(0.997*0.001) / (0.997*0.001 + (1-.985)*(1-0.001))
coinPlot(10)
coinPlot(10000)
qnorm(.95)
bye()
data(swiss); par(mfrow = c(2,2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
?influence.measures
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
?shuttle
?library
data(shuttle)
?MASS
install.packages("MASS")
install.packages("MASS")
data(shuttle)
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
install.packages("googleVis")
library(googleVis)
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
shiny::runApp('2015-05_dataProducts/courseProjectShinyApp/mortgageCalculator')
mortgage(P = input$currentAmount,
I = input$currentPercent,
L = input$currentYears,
plotData = F)
View(aDFmonth)
install.packages("SnowballC")
library(SnowballC)
setwd("~/r_wdir/2015-07_capstone/Capstone")
library(tm)
dirName <- file.path(".", "samples")
length(dir(dirName))
docs <- Corpus(DirSource(dirName))
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, stripWhitespace)
str(docs)
library(SnowballC)
docs <- tm_map(docs, stemDocument)
str(docs[1])
str(docs)
str(docs[1][1])
str(docs[1][1][1])
str(docs[1][1][1][1])
str(docs[1])
str(docs[1]$sample_en_US.blogs.txt)
str(docs[c(1,1)])
str(docs[c(1,1,1)])
str(docs[c(1,1,2)])
str(docs[1,1])
str(docs[1],[1])
str(docs[1][[1]])
str(docs[1][[1]][[1]])
str(docs[c(1,2,3)][[1]][[1]])
str(docs[c(2)][[1]][[1]])
str(docs[2][[1]][[1]])
str(docs[1:3][[1]][[1]])
str(docs[c(1:3)][[1]][[1]])
str(docs[1][[1]][[1]])
str(docs[2][[1]][[1]])
str(docs[3][[1]][[1]])
dtm <- DocumentTermMatrix(docs)
dtm
inspect(dtm[1:5, 1000:1005])
inspect(dtm[1:5, 1:5])
inspect(dtm[1:5, 10:15])
inspect(dtm[1:3, 1:5])
inspect(dtm[1:3, 1:10])
freq <- colSums(as.matrix(dtm))
length(freq)
ord <- order(freq)
ord
freq[head(ord)]
freq[tail(ord)]
freq[tail(ord, 10)]
ord <- -order(freq)
freq[tail(ord, 10)]
ord <- order(-freq)
freq[tail(ord, 10)]
ord <- order(freq)
freq[tail(ord, 10)]
head(table(freq), 15)
source('~/r_wdir/2015-07_capstone/Capstone/capstoneTokenization.R', echo=TRUE)
setwd("~/r_wdir/2015-07_capstone/Capstone")
library(tm)
dirName <- file.path(".", "samples")
docs <- Corpus(DirSource(dirName))
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, stripWhitespace)
library(SnowballC)
docs <- tm_map(docs, stemDocument)
str(docs[1][[1]][[1]])
str(docs[1][[1]][[1]][1:10])
docs[1][[1]][[1]][1:10]
docs[1][[1]][[1]][1]
docs[1][[1]][[1]][1]
docs[2][[1]][[1]][1]
docs[3][[1]][[1]][1]
inspect(dtm[1:3, 1:10]) # Look at the first 10 words
freq <- colSums(as.matrix(dtm))
ord <- order(freq)
freq[tail(ord, 10)] # Look at 10 most frequent words
head(table(freq), 15)
tail(table(freq), 15)
dim(dtm)
?removeSparseTerms
dtms <- removeSparseTerms(dtm, 0.5)
dim(dtms)
inspect(dtms)
dtms
dtm
freq <- colSums(as.matrix(dtms))
freq
ord <- order(freq)
freq[tail(ord, 10)]
freq[head(ord, 10)]
dtms <- removeSparseTerms(dtm, 0.1)
dim(dtms)
dtm
dtms
freq <- colSums(as.matrix(dtms))
ord <- order(freq)
freq[tail(ord, 10)]
freq[head(ord, 10)]
dtms <- removeSparseTerms(dtm, 0.08)
dim(dtms)
dtms <- removeSparseTerms(dtm, 0.05)
dim(dtms)
dtms <- removeSparseTerms(dtm, 0.01)
dim(dtms)
dtm
dtms
freq <- colSums(as.matrix(dtms))
ord <- order(freq)
freq[head(ord, 10)]
dtms <- removeSparseTerms(dtm, 0.001)
dim(dtms)
dtms <- removeSparseTerms(dtm, 0.05)
dim(dtms)
dtm
dtms
freq <- colSums(as.matrix(dtms))
ord <- order(freq)
freq[head(ord, 10)]
freq[head(ord, 15)]
freq[head(ord, 15)]
freq[tail(ord, 15)]
hist(freq[tail(ord, 15)])
freq[tail(ord, 15)]
hist(freq[ord])
ord
freq[tail(ord, 15)]
hist(freq)
freq
install.packages("wordcloud")
set.seed(123)
library(wordcloud)
set.seed(123)
wordcloud(names(freq), freq, min.freq = 100)
wordcloud(names(freq), freq, min.freq = 1000)
warnings()
wordcloud(names(freq), freq, min.freq = 10000)
wordcloud(names(freq), freq, min.freq = 50000)
wordcloud(names(freq), freq, min.freq = 50000, max.words = 100)
set.seed(123)
wordcloud(names(freq), freq, min.freq = 50000, max.words = 100)
wordcloud(names(freq), freq, min.freq = 100000, max.words = 100)
wordcloud(names(freq), freq, min.freq = 200000, max.words = 100)
freq[tail(ord, 15)]
freq
freq[tail(ord, 15)]
wordcloud(names(freq), freq, min.freq = 15000, max.words = 100)
wordcloud(names(freq), freq, min.freq = 10000, max.words = 100)
freq[tail(ord, 15)]
wordcloud(names(freq), freq, min.freq = 15000, max.words = 100)
wordcloud(names(freq), freq, min.freq = 15000)
set.seed(123)
wordcloud(names(freq), freq, min.freq = 15000)
wordcloud(names(freq), freq, min.freq = 16000)
set.seed(123)
wordcloud(names(freq), freq, min.freq = 16000)
?wordcloud
wordcloud(names(freq), freq, min.freq = 16000, random.order = FALSE)
wordcloud(names(freq), freq, min.freq = 15000, random.order = FALSE)
wordcloud(names(freq), freq, min.freq = 12000, random.order = FALSE)
wordcloud(names(freq), freq, min.freq = 14000, random.order = FALSE)
set.seed(123)
wordcloud(names(freq), freq, min.freq = 14000, random.order = FALSE)
wordcloud(names(freq), freq, min.freq = 15000, random.order = FALSE)
set.seed(123)
wordcloud(names(freq), freq, min.freq = 15000, random.order = FALSE)
wordcloud(names(freq), freq, min.freq = 15000, random.order = FALSE,
colors = brewer.pal(6, "Dark2")
)
set.seed(123)
wordcloud(names(freq), freq, min.freq = 15000, random.order = FALSE,
colors = brewer.pal(6, "Dark2"))
set.seed(123)
wordcloud(names(freq), freq, min.freq = 15000, random.order = FALSE,
colors = brewer.pal(6, "Dark2"), scale = c(3, 0.1))
set.seed(123)
wordcloud(names(freq), freq, min.freq = 12000, random.order = FALSE,
colors = brewer.pal(6, "Dark2"), scale = c(3, 0.1))
set.seed(123)
wordcloud(names(freq), freq, min.freq = 10000, random.order = FALSE,
colors = brewer.pal(6, "Dark2"), scale = c(3, 0.1))
set.seed(123)
wordcloud(names(freq), freq, min.freq = 10000,
colors = brewer.pal(6, "Dark2"), scale = c(3, 0.1))
setwd("~/r_wdir/2015-07_capstone/Capstone")
